@page "/"
@using models

@inject services.ProductServices service
@inject DialogService DialogService
@inject NotificationService NotificationService

<h1>CRUD app made in Blazor</h1>

<RadzenButton Click=@(args => AddNewDialog()) Text="Add New" Icon="add_circle_outline"
    ButtonStyle="ButtonStyle.Primary" class="m-2" style="background-color: rgb(64 64 64);" />

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.Advanced" AllowSorting="true"
    PageSize="5" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
    Data="@products" TItem="Product" ColumnWidth="300px" LogicalFilterOperator="LogicalFilterOperator.Or">
    <Columns>
        <RadzenDataGridColumn TItem="Product" Property="ID" Filterable="false" Title="ID" Frozen="true" Width="70px"
            TextAlign="TextAlign.Center" />
        <RadzenDataGridColumn TItem="Product" Property="Name" Title="First Name" Width="140px" />
        <RadzenDataGridColumn TItem="Product" Property="Price" Title="Last Name" Width="140px" />
        <RadzenDataGridColumn TItem="Product" Property="Description" Title="Job Title" Width="200px" />
        <RadzenDataGridColumn TItem="Product" Property="Quantity" Title="Quantity" Width="100px" />
        <RadzenDataGridColumn TItem="Product" Context="Sample" Title="View" Sortable="false" Filterable="false"
            TextAlign="TextAlign.Center" Width="5rem">
            <Template Context="prod">
                <RadzenButton Click=@(args => UpdateDialog(@prod)) Icon="edit"
                    ButtonStyle="ButtonStyle.Info" />
                <RadzenButton Click=@(args => DeleteProduct(@prod)) Icon="delete" ButtonStyle="ButtonStyle.Secondary" />
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    IEnumerable<Product>? products;
    List<Product> Products = new List<Product>();
    Product product = new Product();
    bool busy;
    protected override async Task OnInitializedAsync()
    {
        await RefreshProducts();
    }
    async Task AddNewDialog()
    {
        await DialogService.OpenAsync("Add Product", ds =>
    @<div>
        <RadzenFieldset Text=" ">
            <div class="row mb-3">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Name" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox @bind-Value=NewProduct.Name style="width: 100%;" Name="Name" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Price" />
                </div>
                <div class="col-md-8">
                    <RadzenNumeric @bind-Value=NewProduct.Price TValue="double" Class="w-100" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Description" />
                </div>
                <div class="col-md-8">
                    <RadzenTextArea @bind-Value=NewProduct.Description Class="w-100" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Quantity" />
                </div>
                <div class="col-md-8">
                    <RadzenNumeric @bind-Value=NewProduct.Quantity TValue="int" Class="w-100" />
                </div>
            </div>
            <div class="mb-3">
                <div class=" align-items-center d-flex">
                    <RadzenButton style="width: 160px; background-color: rgb(64 64 64);" Icon="save" BusyText="Saving ..." IsBusy=@busy Click=@AddNewProduct Text="Save" />
                </div>
            </div>
        </RadzenFieldset>
    </div>
    , new DialogOptions() { CloseDialogOnOverlayClick = true });
    }
    async Task UpdateDialog(Product product)
    {
        SetProductForUpdate(product);
        await DialogService.OpenAsync("Add Product", ds =>
    @<div>
        <RadzenFieldset Text=" ">
            <div class="row mb-3">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Name" />
                </div>
                <div class="col-md-8">
                    <RadzenTextBox @bind-Value=UpdateProduct.Name style="width: 100%;" Name="Name" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Price" />
                </div>
                <div class="col-md-8">
                    <RadzenNumeric @bind-Value=UpdateProduct.Price TValue="double" Class="w-100" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Description" />
                </div>
                <div class="col-md-8">
                    <RadzenTextArea @bind-Value=UpdateProduct.Description Class="w-100" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4 align-items-center d-flex">
                    <RadzenLabel Text="Quantity" />
                </div>
                <div class="col-md-8">
                    <RadzenNumeric @bind-Value=UpdateProduct.Quantity TValue="int" Class="w-100" />
                </div>
            </div>
            <div class="mb-3">
                <div class=" align-items-center d-flex">
                    <RadzenButton style="width: 160px; background-color: rgb(64 64 64);" Icon="save" BusyText="Saving ..." IsBusy=@busy Click=@UpdateProductData Text="Save" />
                </div>
            </div>
        </RadzenFieldset>
    </div>
    , new DialogOptions() { CloseDialogOnOverlayClick = true });
    }
    private async Task RefreshProducts()
    {
        products = await service.GetProductAsync();
    }

    public Product NewProduct { get; set; } = new Product();
    private async Task AddNewProduct()
    {
        busy = true;
        await service.AddProductAsync(NewProduct);
        await RefreshProducts();
        NewProduct = new Product();
        busy = false;
        DialogService.Close();
        NotificationService.Notify(new NotificationMessage{Severity=NotificationSeverity.Success, Summary = "Product added", Duration = 5000});
    }

    Product UpdateProduct = new Product();
    private void SetProductForUpdate(Product product)
    {
        UpdateProduct = product;
    }

    private async Task UpdateProductData()
    {
        await service.UpdateProductAsync(UpdateProduct);
        await RefreshProducts();
        DialogService.Close();
        NotificationService.Notify(new NotificationMessage{Severity=NotificationSeverity.Success, Summary = "Product updated", Duration = 5000});
    }

    private async Task DeleteProduct(Product product)
    {
        await service.DeleteProductAsync(product);
        await RefreshProducts();
        NotificationService.Notify(new NotificationMessage{Severity=NotificationSeverity.Error, Summary = "Product deleted", Duration = 5000});
    }
}